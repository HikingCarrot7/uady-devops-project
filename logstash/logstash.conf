input { 
    file {
        # La ruta al archivo debe ser absoluta
        path => "/app/logs/*.log"
        start_position => "beginning"
    }
}

filter {
    grok {
        # Request method info
        match => { message => "\[%{TIMESTAMP_ISO8601:timestamp}\] \[%{LOGLEVEL:log-level}\] \[%{DATA:context}\] \| %{WORD:method} \| ROUTE: %{GREEDYDATA:route} \| QUERY_PARAMS: %{GREEDYDATA:query_params} \| HEADERS: %{GREEDYDATA:headers}" }
        add_field => {
            "type" => "info_request_method"
        }
    }

    grok {
        # Request method debug
        match => { message => "\[%{TIMESTAMP_ISO8601:timestamp}\] \[%{LOGLEVEL:log-level}\] \[%{DATA:context}\] \| %{WORD:method} \| ROUTE: %{GREEDYDATA:route} \| PARAMS: %{GREEDYDATA:params} \| BODY: %{GREEDYDATA:body}" }
        add_field => {
            "type" => "debug_request_method"
        }
    }
     
    grok {
        # Query to database
        match => { message => "\[%{TIMESTAMP_ISO8601:timestamp}\] \[%{LOGLEVEL:log-level}\] \[%{DATA:context}\] \| QUERY: %{GREEDYDATA:query}" }
        add_field => {
            "type" => "query_to_database"
        }
    }

    grok {
        # Warning
        match => { message => "\[%{TIMESTAMP_ISO8601:timestamp}\] \[%{LOGLEVEL:log-level}\] \[%{DATA:context}\] \| %{WORD:method} \| ROUTE: %{GREEDYDATA:route} \| WARNING_ERRORS: %{GREEDYDATA:warning_errors}" }
        add_field => {
            "type" => "warning_message"
        }
    }
    
    grok {
        # Error
        match => { message => "\[%{TIMESTAMP_ISO8601:timestamp}\] \[%{LOGLEVEL:log-level}\] \[%{DATA:context}\] \| %{WORD:method} \| ROUTE: %{GREEDYDATA:route} \| STATUS_CODE: %{GREEDYDATA:status_code} \| ERROR: %{GREEDYDATA:error}" }
        add_field => {
            "type" => "info_request_method"
        }
    }
    
}

output {
    elasticsearch {
        hosts => [ "http://host.docker.internal:9200" ]
        index => "vuelos-%{+YYYY.MM.dd}"
    }

    stdout { codec => rubydebug }
}
